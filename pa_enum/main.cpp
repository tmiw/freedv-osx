//=========================================================================
// Name:          main.cpp
// Purpose:       Implements simple wxWidgets application with GUI
//                 created using wxFormBuilder.
// Author:
// Created:
// Copyright:
// License:       wxWidgets license (www.wxwidgets.org)
//
// Notes:        Note that all GUI creation code is implemented in
//                 gui.cpp source file which is generated by wxFormBuilder.
//=========================================================================
#include "main.h"

// initialize the application
IMPLEMENT_APP(MainApp);

//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=
// application class implementation
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=
bool MainApp::OnInit()
{
    SetTopWindow(new MainFrame(NULL));
    GetTopWindow()->Show();
    // true = enter the main loop
    return true;
}

//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=
// main application frame implementation
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=
MainFrame::MainFrame(wxWindow *parent) : MainFrameBase(parent)
{
    m_isPaInitialized = false;
    wxInitAllImageHandlers();
    // Give it an icon
    SetIcon(wxICON("../bitmaps/sample.ico"));

    // Make an image list containing large icons
    m_imageListNormal = new wxImageList(32, 32, true);
    m_imageListSmall = new wxImageList(16, 16, true);

#ifdef __WXMSW__
    m_imageListSmall->Add(wxIcon(wxT("bitmaps/toolchec.ico"), wxBITMAP_TYPE_ICO));
    m_imageListSmall->Add(wxIcon(wxT("bitmaps/transparent.ico"), wxBITMAP_TYPE_ICO));
    m_imageListSmall->Add(wxIcon(wxT("bitmaps/toolchar.ico"), wxBITMAP_TYPE_ICO));
    m_imageListSmall->Add(wxIcon(wxT("bitmaps/tooldata.ico"), wxBITMAP_TYPE_ICO));
    m_imageListSmall->Add(wxIcon(wxT("bitmaps/toolgame.ico"), wxBITMAP_TYPE_ICO));
    m_imageListSmall->Add(wxIcon(wxT("bitmaps/toolnote.ico"), wxBITMAP_TYPE_ICO));
    m_imageListSmall->Add(wxIcon(wxT("bitmaps/tooltime.ico"), wxBITMAP_TYPE_ICO));
    m_imageListSmall->Add(wxIcon(wxT("bitmaps/inArrow16x16.ico"), wxBITMAP_TYPE_ICO));
    m_imageListSmall->Add(wxIcon(wxT("bitmaps/outArrow16x16.ico"), wxBITMAP_TYPE_ICO));
#else
    m_imageListNormal->Add(wxIcon( toolbrai_xpm ));
    m_imageListNormal->Add(wxIcon( toolchar_xpm ));
    m_imageListNormal->Add(wxIcon( tooldata_xpm ));
    m_imageListNormal->Add(wxIcon( toolnote_xpm ));
    m_imageListNormal->Add(wxIcon( tooltodo_xpm ));
    m_imageListNormal->Add(wxIcon( toolchec_xpm ));
    m_imageListNormal->Add(wxIcon( toolgame_xpm ));
    m_imageListNormal->Add(wxIcon( tooltime_xpm ));
    m_imageListNormal->Add(wxIcon( toolword_xpm ));
    m_imageListSmall->Add(wxIcon(small1_xpm));
#endif
    if(!m_isPaInitialized)
    {
        if((pa_err = Pa_Initialize()) == paNoError)
        {
            m_isPaInitialized = true;
        }
        else
        {
            wxMessageBox(wxT("Port Audio failed to initialize"), wxT("Pa_Initialize"), wxOK);
            return;
        }
    }
    m_notebook1->SetSelection(0);
    showAPIInfo();
    populateParams(m_listCtrlRxInDevices,  AUDIO_IN);
    populateParams(m_listCtrlRxOutDevices, AUDIO_OUT);
    populateParams(m_listCtrlTxInDevices,  AUDIO_IN);
    populateParams(m_listCtrlTxOutDevices, AUDIO_OUT);
}

//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=
// ~MainFrame()
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=
MainFrame::~MainFrame()
{
}

//-------------------------------------------------------------------------
// OnCloseFrame()
//-------------------------------------------------------------------------
void MainFrame::OnCloseFrame(wxCloseEvent& event)
{
    if(m_isPaInitialized)
    {
        if((pa_err = Pa_Terminate()) == paNoError)
        {
            m_isPaInitialized = false;
        }
        else
        {
            wxMessageBox(wxT("Port Audio failed to Terminate"), wxT("Pa_Terminate"), wxOK);
        }
    }
    Destroy();
}

//-------------------------------------------------------------------------
// OnExitClick()
//-------------------------------------------------------------------------
void MainFrame::OnExitClick(wxCommandEvent& event)
{
    if(m_isPaInitialized)
    {
        if((pa_err = Pa_Terminate()) == paNoError)
        {
            m_isPaInitialized = false;
        }
        else
        {
            wxMessageBox(wxT("Port Audio failed to Terminate"), wxT("Pa_Terminate"), wxOK);
        }
    }
    Destroy();
}

/*
//-------------------------------------------------------------------------
// getSelectedItems()
//-------------------------------------------------------------------------
long *MainFrame::getSelectedItems(wxListCtrl*listCtrl)
{
    long *items[];
    long item = listCtrl->GetNextItem(-1, wxLIST_NEXT_ALL, wxLIST_STATE_SELECTED);
    items[0] = item;
    while ( item != -1 )
    {
        wxLogMessage(wxT("\t%ld (%s)"), item, listCtrl->GetItemText(item).c_str());
        if ( ++shownCount > 10 )
        {
            wxLogMessage(wxT("\t... more selected items snipped..."));
            break;
        }
        item = listCtrl->GetNextItem(item, wxLIST_NEXT_ALL, wxLIST_STATE_SELECTED);
    }
} return items;
*/

//-------------------------------------------------------------------------
// OnDeviceSelect()
//-------------------------------------------------------------------------
void MainFrame::OnDeviceSelect( wxListEvent& event )
{
    wxListItem  info;
    long item;
    item = m_listCtrlRxInDevices->GetNextItem(-1, wxLIST_NEXT_ALL, wxLIST_STATE_SELECTED);
    wxMessageBox(m_listCtrlRxInDevices->GetItemText(item, 2), wxT("Item"), wxOK);
}

//-------------------------------------------------------------------------
// DisplaySupportedSampleRates()
//-------------------------------------------------------------------------
void MainFrame::DisplaySupportedSampleRates(const PaStreamParameters *inputParameters, const PaStreamParameters *outputParameters)
{
    static double standardSampleRates[] =
    {
        8000.0,     9600.0,
        11025.0,    12000.0,
        16000.0,    22050.0,
        24000.0,    32000.0,
        44100.0,    48000.0,
        88200.0,    96000.0,
        192000.0,   -1          // negative terminated  list
    };
    int i;
    int printCount;
    PaError err;

    printCount = 0;
    for(i=0; standardSampleRates[i] > 0; i++)
    {
        err = Pa_IsFormatSupported(inputParameters, outputParameters, standardSampleRates[i]);
        if(err == paFormatIsSupported)
        {
            if(printCount == 0)
            {
                printf("\t%8.2f", standardSampleRates[i]);
                printCount = 1;
            }
            else if(printCount == 4)
            {
                printf(",\n\t%8.2f", standardSampleRates[i]);
                printCount = 1;
            }
            else
            {
                printf(", %8.2f", standardSampleRates[i]);
                ++printCount;
            }
        }
    }
    if(!printCount)
    {
        printf("None\n");
    }
    else
    {
        printf("\n");
    }
}

//-------------------------------------------------------------------------
// OnRefreshClick()
//-------------------------------------------------------------------------
void MainFrame::OnRefreshClick(wxCommandEvent& event)
{
    m_notebook1->SetSelection(0);
    showAPIInfo();
    populateParams(m_listCtrlRxInDevices,  AUDIO_IN);
    populateParams(m_listCtrlRxOutDevices, AUDIO_OUT);
    populateParams(m_listCtrlTxInDevices,  AUDIO_IN);
    populateParams(m_listCtrlTxOutDevices, AUDIO_OUT);
}

//-------------------------------------------------------------------------
// GetAPIInfo()
//-------------------------------------------------------------------------
void MainFrame::showAPIInfo()
{
    wxString    strval;
    int         apiCount        = 0;
    int         numDevices      = 0;

    strval = Pa_GetVersionText();
    m_textStringVer->SetValue(strval);

    numDevices = Pa_GetVersion();
    strval.Printf(wxT("%d"), numDevices);
    m_textIntVer->SetValue(strval);

    apiCount = Pa_GetHostApiCount();
    strval.Printf(wxT("%d"), apiCount);
    m_textAPICount->SetValue(strval);

    numDevices = Pa_GetDeviceCount();
    strval.Printf(wxT("%d"), numDevices);
    m_textCDevCount->SetValue(strval);
}

//-------------------------------------------------------------------------
// populateParams()
//-------------------------------------------------------------------------
void MainFrame::populateParams(wxListCtrl* ctrl, int in_out)
{
    int         numDevices       = 0;
    int         defaultDisplayed = false;
    const       PaDeviceInfo *deviceInfo = NULL;
    wxListItem  listItem;
    wxString    buf;
    int         j = 0;

    numDevices = Pa_GetDeviceCount();

    if(ctrl->GetColumnCount() > 0)
    {
        ctrl->ClearAll();
    }
    ctrl->SetImageList(m_imageListSmall, wxIMAGE_LIST_SMALL);

    listItem.SetAlign(wxLIST_FORMAT_CENTRE);
    listItem.SetText(wxT("Sel"));
    ctrl->InsertColumn(0, listItem);
    ctrl->SetColumnWidth(0, 45);

    listItem.SetAlign(wxLIST_FORMAT_CENTRE);
    listItem.SetText(wxT("Dflt"));
    ctrl->InsertColumn(1, listItem);
    ctrl->SetColumnWidth(1, 45);

    listItem.SetAlign(wxLIST_FORMAT_LEFT);
    listItem.SetText(wxT("Device"));
    ctrl->InsertColumn(2, listItem);
    ctrl->SetColumnWidth(2, 220);

    listItem.SetAlign(wxLIST_FORMAT_LEFT);
    listItem.SetText(wxT("API"));
    ctrl->InsertColumn(3, listItem);
    ctrl->SetColumnWidth(3, 200);

    if(in_out == AUDIO_IN)
    {
        listItem.SetAlign(wxLIST_FORMAT_CENTRE);
        listItem.SetText(wxT("# Inputs"));
        ctrl->InsertColumn(4, listItem);
        ctrl->SetColumnWidth(4, 85);

        listItem.SetAlign(wxLIST_FORMAT_CENTRE);
        listItem.SetText(wxT("Min Latency"));
        ctrl->InsertColumn(5, listItem);
        ctrl->SetColumnWidth(5, 120);

        listItem.SetAlign(wxLIST_FORMAT_CENTRE);
        listItem.SetText(wxT("Max Latency"));
        ctrl->InsertColumn(6, listItem);
        ctrl->SetColumnWidth(6, 120);
        for(int i = 0; i < numDevices; i++ )
        {
            buf.Printf(wxT(""));
            deviceInfo = Pa_GetDeviceInfo(i);
            if(deviceInfo->maxInputChannels > 0)
            {
                ctrl->InsertItem(j, ICON_CHECK);
                defaultDisplayed = 0;
                if(i == Pa_GetDefaultInputDevice())
                {
                    // Default Output
                    ctrl->SetItem(j, 1, buf, ICON_INARROW);
                    defaultDisplayed = true;
                }
                else if(i == Pa_GetHostApiInfo(deviceInfo->hostApi)->defaultInputDevice)
                {
                    ctrl->SetItem(j, 1, buf, ICON_OUTARROW);
                    defaultDisplayed = true;
                }
                if(!defaultDisplayed)
                {
                    ctrl->SetItem(j, 1, buf, ICON_TRANSPARENT);
                }
                ctrl->SetItemData(j, 1);

                buf.Printf(wxT("%s"), deviceInfo->name);
                ctrl->SetItem(j, 2, buf);

                buf.Printf(wxT("%s"), Pa_GetHostApiInfo(deviceInfo->hostApi)->name);
                ctrl->SetItem(j, 3, buf);

                buf.Printf(wxT("%i"), deviceInfo->maxInputChannels);
                ctrl->SetItem(j, 4, buf);

                buf.Printf(wxT("%8.4f"), deviceInfo->defaultLowInputLatency);
                ctrl->SetItem(j, 5, buf);

                buf.Printf(wxT("%8.4f"), deviceInfo->defaultHighInputLatency);
                ctrl->SetItem(j, 6, buf);
                j++;
            }
        }
    }
    else if(in_out == AUDIO_OUT)
    {
        listItem.SetAlign(wxLIST_FORMAT_CENTRE);
        listItem.SetText(wxT("# Outputs"));
        ctrl->InsertColumn(4, listItem);
        ctrl->SetColumnWidth(4, 85);

        listItem.SetAlign(wxLIST_FORMAT_CENTRE);
        listItem.SetText(wxT("Min Latency"));
        ctrl->InsertColumn(5, listItem);
        ctrl->SetColumnWidth(5, 120);

        listItem.SetAlign(wxLIST_FORMAT_CENTRE);
        listItem.SetText(wxT("Max Latency"));
        ctrl->InsertColumn(6, listItem);
        ctrl->SetColumnWidth(6, 120);
        for(int i = 0; i < numDevices; i++)
        {
            buf.Printf(wxT(""));
            deviceInfo = Pa_GetDeviceInfo(i);
            defaultDisplayed = 0;
            if(deviceInfo->maxOutputChannels > 0)
            {
                ctrl->InsertItem(j, ICON_CHECK);
                if(i == Pa_GetDefaultOutputDevice())
                {
                    // Default Output
                    ctrl->SetItem(j, 1, buf, ICON_OUTARROW);
                    defaultDisplayed = true;
                }
                else if(i == Pa_GetHostApiInfo(deviceInfo->hostApi)->defaultOutputDevice)
                {
                    ctrl->SetItem(j, 1, buf, ICON_OUTARROW);
                    defaultDisplayed = true;
                }

                if(!defaultDisplayed)
                {
                    ctrl->SetItem(j, 1, buf, ICON_TRANSPARENT);
                }
                ctrl->SetItemData(j, 1);

                buf.Printf(wxT("%s"), deviceInfo->name);
                ctrl->SetItem(j, 2, buf);

                buf.Printf(wxT("%s"), Pa_GetHostApiInfo(deviceInfo->hostApi)->name);
                ctrl->SetItem(j, 3, buf);

                buf.Printf(wxT("%i"), deviceInfo->maxOutputChannels);
                ctrl->SetItem(j, 4, buf);

                buf.Printf(wxT("%8.4f"), deviceInfo->defaultLowOutputLatency);
                ctrl->SetItem(j, 5, buf);

                buf.Printf(wxT("%8.4f"), deviceInfo->defaultHighOutputLatency);
                ctrl->SetItem(j, 6, buf);
                j++;
            }
        }
    }
    else
    {
        // Dun, do what?
    }
}

